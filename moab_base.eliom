(* This file was generated by Ocsigen Start.
   Feel free to use it, modify it, and redistribute it as you wish. *)

let%server application_name = !Moab_config.app_name

let%client application_name = Eliom_client.get_application_name ()

let%shared displayed_app_name = "CSD3600 Administration Website"

(* Database initialization *)
let () =
  Os_db.init
    ?host:!Moab_config.os_db_host
    ?port:!Moab_config.os_db_port
    ?user:!Moab_config.os_db_user
    ?password:!Moab_config.os_db_password
    ?database:!Moab_config.os_db_database
    ?unix_domain_socket_dir:!Moab_config.os_db_unix_domain_socket_dir
    ()

let () = Os_email.set_mailer "/usr/sbin/sendmail"
let () = Os_email.set_from_addr ("moab team", "moab@kerguelen.org")

(* Create a module for the application. See
   https://ocsigen.org/eliom/manual/clientserver-applications for more
   information. *)
[%%shared
module App = Eliom_registration.App (struct
    let application_name = application_name
    let global_data_path = Some ["__global_data__"]
  end)
]

(* As the headers (stylesheets, etc) won't change, we ask Eliom not to
   update the <head> of the page when changing page. (This also avoids
   blinking when changing page in iOS). *)
let%client _ = Eliom_client.persist_document_head ()

(* Utility functions *)

[%%shared.start]
open Lwt.Infix

let rec map2_s (f: 'a -> 'b -> 'c Lwt.t) (l1: 'a list) (l2: 'b list): 'c list Lwt.t =
	match l1, l2 with
	| [], [] -> Lwt.return []
	| h1::t1, h2::t2 ->
		let%lwt h = f h1 h2 in
		let%lwt r = map2_s f t1 t2 in
		Lwt.return @@ h::r
	| _, _ -> Lwt.fail (Invalid_argument "map2_s")

let map2i_s (f: int -> 'a -> 'b -> 'c Lwt.t) (l1: 'a list) (l2: 'b list): 'c list Lwt.t =
	let rec map2i_s_aux f c l1 l2 =
		match l1, l2 with
		| [], [] -> Lwt.return []
		| h1::t1, h2::t2 ->
			let%lwt h = f c h1 h2 in
			let%lwt r = map2i_s_aux f (c+1) t1 t2 in
			Lwt.return @@ h::r
		| _, _ -> Lwt.fail (Invalid_argument "map2i_s") in
	map2i_s_aux f 0 l1 l2

let rec iter2_s (f: 'a -> 'b -> unit Lwt.t) (l1: 'a list) (l2: 'b list): unit Lwt.t =
	match l1, l2 with
	| [], [] -> Lwt.return ()
	| h1::t1, h2::t2 ->
		let%lwt () = f h1 h2 in
		iter2_s f t1 t2
	| _, _ -> Lwt.fail (Invalid_argument "iter2_s")

let rec take n l =
	match l with
	| [] -> []
	| h::t -> if n = 0 then [] else h::take (n-1) t

let rec drop n l =
	match l with
	| [] -> []
	| h::t -> if n = 0 then l else drop (n-1) t

let default s o =
	match o with
	| None -> s
	| Some x -> x

let catch_cancel f x =
  Lwt.catch
    (fun () -> f x)
    (function
    | Lwt.Canceled -> Lwt.return ()
    | e -> Lwt.fail e)

let with_error_log f x =
  Lwt.catch
    (fun () -> f x)
    (fun e -> Lwt.return ())

let seq_loop_pick evh ?(cancel_handler = false) ?use_capture targets handler =
  let cancelled = ref false in
  let cur = ref (Lwt.fail (Failure "Lwt_js_event")) in
  (* Using Lwt.fail as default, to be polymorphic *)
  let cur_handler = ref (Lwt.return ()) in
  let lt, _lw = Lwt.task () in
  Lwt.on_cancel lt
    (fun () ->
      Lwt.cancel !cur;
      if cancel_handler then Lwt.cancel !cur_handler;
      cancelled := true);
  let rec aux () =
    if not !cancelled (* In the case it has been cancelled
                         during the previous handler,
                         we do not reinstall the event handler *)
    then begin
			let ts = List.map (fun t -> evh ?use_capture t) targets in
      let t = Lwt.pick ts in
      cur := t;
      t >>= fun e ->
      cur_handler := with_error_log (handler e) lt;
      !cur_handler >>= aux
    end
    else Lwt.return ()
  in
  Lwt.async (catch_cancel aux);
  lt

let%shared to_20point percent_grade =
	match percent_grade with
	| None -> (20, "fail")
	| Some f -> 
		if Float.compare f 78.5 >= 0 then (1, "first")
		else if Float.compare f 75.5 >= 0 then (2, "first")
		else if Float.compare f 72.5 >= 0 then (3, "first")
		else if Float.compare f 69.5 >= 0 then (4, "first")
		else if Float.compare f 66.5 >= 0 then (5, "upper-second")
		else if Float.compare f 64.5 >= 0 then (6, "upper-second")
		else if Float.compare f 61.5 >= 0 then (7, "upper-second")
		else if Float.compare f 59.5 >= 0 then (8, "upper-second")
		else if Float.compare f 56.5 >= 0 then (9, "lower-second")
		else if Float.compare f 54.5 >= 0 then (10, "lower-second")
		else if Float.compare f 51.5 >= 0 then (11, "lower-second")
		else if Float.compare f 49.5 >= 0 then (12, "lower-second")
		else if Float.compare f 46.5 >= 0 then (13, "third")
		else if Float.compare f 44.5 >= 0 then (14, "third")
		else if Float.compare f 41.5 >= 0 then (15, "third")
		else if Float.compare f 39.5 >= 0 then (16, "third")
		else if Float.compare f 34.5 >= 0 then (17, "fail")
		else if Float.compare f 29.5 >= 0 then (18, "fail")
		else (19, "fail")

let%shared compute_pres_total peer duration tutor =
	let duration_factor =
		if duration >= 25 then 1.0
		else if duration >= 20 then 0.9
		else if duration >= 15 then 0.8
		else if duration >= 10 then 0.7
		else if duration >= 5 then 0.6
		else 0.5 in
	match peer, tutor with
	| None, None -> None
	| Some p, None -> Some p
	| None, Some t -> Some (duration_factor *. (float_of_string t))
	| Some p, Some t -> Some (p +. (duration_factor *. (float_of_string t)))

