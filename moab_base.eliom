(* This file was generated by Ocsigen Start.
   Feel free to use it, modify it, and redistribute it as you wish. *)

let%server application_name = !Moab_config.app_name

let%client application_name = Eliom_client.get_application_name ()

let%shared displayed_app_name = "CSD3600 Administration Website"

(* Database initialization *)
let () =
  Os_db.init
    ?host:!Moab_config.os_db_host
    ?port:!Moab_config.os_db_port
    ?user:!Moab_config.os_db_user
    ?password:!Moab_config.os_db_password
    ?database:!Moab_config.os_db_database
    ?unix_domain_socket_dir:!Moab_config.os_db_unix_domain_socket_dir
    ()

let () = Os_email.set_mailer "/usr/sbin/sendmail"
let () = Os_email.set_from_addr ("moab team", "moab@kerguelen.org")

(* Create a module for the application. See
   https://ocsigen.org/eliom/manual/clientserver-applications for more
   information. *)
[%%shared
module App = Eliom_registration.App (struct
    let application_name = application_name
    let global_data_path = Some ["__global_data__"]
  end)
]

(* As the headers (stylesheets, etc) won't change, we ask Eliom not to
   update the <head> of the page when changing page. (This also avoids
   blinking when changing page in iOS). *)
let%client _ = Eliom_client.persist_document_head ()

(* Utility functions *)

[%%shared.start]

let rec map2_s (f: 'a -> 'b -> 'c Lwt.t) (l1: 'a list) (l2: 'b list): 'c list Lwt.t =
	match l1, l2 with
	| [], [] -> Lwt.return []
	| h1::t1, h2::t2 ->
		let%lwt h = f h1 h2 in
		let%lwt r = map2_s f t1 t2 in
		Lwt.return @@ h::r
	| _, _ -> Lwt.fail (Invalid_argument "map2_s")

let map2i_s (f: int -> 'a -> 'b -> 'c Lwt.t) (l1: 'a list) (l2: 'b list): 'c list Lwt.t =
	let rec map2i_s_aux f c l1 l2 =
		match l1, l2 with
		| [], [] -> Lwt.return []
		| h1::t1, h2::t2 ->
			let%lwt h = f c h1 h2 in
			let%lwt r = map2i_s_aux f (c+1) t1 t2 in
			Lwt.return @@ h::r
		| _, _ -> Lwt.fail (Invalid_argument "map2i_s") in
	map2i_s_aux f 0 l1 l2

let rec take n l =
	match l with
	| [] -> []
	| h::t -> if n = 0 then [] else h::take (n-1) t

let rec drop n l =
	match l with
	| [] -> []
	| h::t -> if n = 0 then l else drop (n-1) t

