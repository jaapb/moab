(* This file was generated by Ocsigen Start.
   Feel free to use it, modify it, and redistribute it as you wish. *)

[%%shared
  open Eliom_content.Html.F
	open CalendarLib
	open Lwt.Infix
]

(* Set personal data *)

let%server set_personal_data_handler =
  Os_session.connected_fun Os_handlers.set_personal_data_handler

let%client set_personal_data_handler =
  let set_personal_data_rpc =
    ~%(Eliom_client.server_function
         [%derive.json : ((string * string) * (string * string))]
         (Os_session.connected_wrapper (set_personal_data_handler ())))
  in
  fun () -> set_personal_data_rpc

(* Forgot password *)

let%server forgot_password_handler =
  Os_handlers.forgot_password_handler
    Moab_services.settings_service

let%client forgot_password_handler =
  let forgot_password_rpc =
    ~%(Eliom_client.server_function [%derive.json : string]
       (Os_session.connected_wrapper (forgot_password_handler ())))
  in
  fun () -> forgot_password_rpc

(* Action links are links created to perform an action. They are used
   for example to send activation links by email, or links to reset a
   password. You can create your own action links and define their
   behavior here. *)
let%shared action_link_handler myid_o akey () =
  (* We try first the default actions (activation link, reset
     password) *)
  try%lwt Os_handlers.action_link_handler myid_o akey () with
  | Os_handlers.No_such_resource
  | Os_handlers.Invalid_action_key _ ->
    Os_msg.msg ~level:`Err ~onload:true
      [%i18n S.invalid_action_key];
    Eliom_registration.(appl_self_redirect Action.send) ()
  | e ->
    let%lwt (email, phantom_user) =
      match e with
      | Os_handlers.Account_already_activated_unconnected
          {Os_types.Action_link_key.userid = _; email; validity = _;
           action = _; data = _; autoconnect = _} ->
        Lwt.return (email, false)
      | Os_handlers.Custom_action_link
          ({Os_types.Action_link_key.userid = _; email; validity = _;
            action = _; data = _; autoconnect = _},
           phantom_user) ->
        Lwt.return (email, phantom_user)
      | _ ->
        Lwt.fail e
    in
    (* Define here your custom action links. If phantom_user is true,
       it means the link has been created for an email that does not
       correspond to an existing user. By default, we just display a
       sign up form or phantom users, a login form for others.  You
       don't need to modify this if you are not using custom action
       links.

       Perhaps personalise the intended behavior for when you meet
       [Account_already_activated_unconnected].  *)
    (* if myid_o = None (* Not currently connected, and no autoconnect *)
    then
      if phantom_user
      then
        let page = [ div ~a:[ a_class ["login-signup-box"] ]
                       [ Os_user_view.sign_up_form
                           ~a_placeholder_email:[%i18n S.your_email]
                           ~text:[%i18n S.sign_up]
                           ~email
                           ()
                       ]
                   ]
        in
        Moab_base.App.send
          (Moab_page.make_page (Os_page.content page))
      else
        let page = [ div
                       ~a:[ a_class ["login-signup-box"] ]
                       [ Os_user_view.connect_form
                           ~a_placeholder_email:[%i18n S.your_email]
                           ~a_placeholder_pwd:[%i18n S.your_password]
                           ~text_keep_me_logged_in:[%i18n S.keep_logged_in]
                           ~text_sign_in:[%i18n S.sign_in]
                           ~email
                           ()
                       ]
                   ]
        in
        Moab_base.App.send
          (Moab_page.make_page (Os_page.content page))
    else (*VVV In that case we must do something more complex. Check
               whether myid = userid and ask the user what he wants to
               do. *) *)
      Eliom_registration.
        (appl_self_redirect
           Redirection.send
           (Redirection Eliom_service.reload_action))

(* Set password *)

let%server set_password_handler =
  Os_session.connected_fun
    (fun myid () (pwd, pwd2) ->
       let%lwt () = Os_handlers.set_password_handler myid () (pwd, pwd2) in
       Lwt.return
         (Eliom_registration.Redirection Eliom_service.reload_action))

let%client set_password_handler () (pwd, pwd2) =
  let%lwt () = Os_handlers.set_password_rpc (pwd, pwd2) in
  Lwt.return (Eliom_registration.Redirection Eliom_service.reload_action)

(* Preregister *)

let%server preregister_handler =
  Os_handlers.preregister_handler

let%client preregister_handler =
  let preregister_rpc =
    ~%(Eliom_client.server_function [%derive.json : string]
       (Os_session.connected_wrapper (preregister_handler ())))
  in
  fun () -> preregister_rpc

let%shared admin_dashboard () =
	let ayear = !(~%Moab_config.current_academic_year) in
	let%lwt lw = Moab_terms.learning_week_of_date ayear (Date.today ()) in
	let%lwt sids = Moab_students.get_active_students (ayear, (match lw with None -> 0 | Some x -> x), None) in
	let%lwt att_rep = Moab_attendance.attendance_report () in
	let%lwt blog_rep = Moab_blogs.blog_report () in
	Lwt.return [div ~a:[a_class ["content-box"]] [
		h1 [txt [%i18n S.dashboard]];
		p [
			txt [%i18n S.current_academic_year ~capitalize:true]; txt ": ";
			txt ayear; txt "; ";
			txt [%i18n S.learning_week]; txt ": ";
			(match lw with
			| None -> b [txt [%i18n S.none]]
			| Some l -> txt (string_of_int l)); txt "; ";
			txt [%i18n S.number_of_students]; txt ": ";
			txt (string_of_int (List.length sids))
		];
		h2 [txt [%i18n S.attendance]];
		att_rep;
		h2 [txt [%i18n S.blogs_to_be_approved]];
		blog_rep
	]]

let%shared student_dashboard myid =
	let ayear = !(~%Moab_config.current_academic_year) in
	let%lwt lw = Moab_terms.learning_week_of_date ayear (Date.today ()) in
	let%lwt attendance_row = Moab_attendance.attendance_tr myid in
	let%lwt blog_row = Moab_blogs.blog_tr myid in
	let%lwt gn = Moab_students.get_group_number (ayear, myid) in
	let%lwt l_sid = Moab_sessions.(find_sessions (ayear, Lecture, None)) in
	let%lwt l_wd = Moab_sessions.get_session_weekday (List.hd l_sid) in
	let%lwt (l_st, l_et) = Moab_sessions.get_session_time (List.hd l_sid) in
	let%lwt l_room = Moab_sessions.get_session_room (List.hd l_sid) in
	let%lwt s_sid = Moab_sessions.(find_sessions (ayear, Seminar, gn)) in
	let%lwt s_wd = Moab_sessions.get_session_weekday (List.hd s_sid) in
	let%lwt (s_st, s_et) = Moab_sessions.get_session_time (List.hd s_sid) in
	let%lwt s_room = Moab_sessions.get_session_room (List.hd s_sid) in
	let%lwt pres_lw = Moab_presentations.find_presentation_opt (ayear, myid) in
	let%lwt pres_row = match pres_lw with
	| None -> Lwt.return @@ p [txt [%i18n S.no_presentation_scheduled]]
	| Some (pr, _) -> 
		let%lwt pres_d = Moab_terms.date_of_learning_week ayear pr (Date.day_of_int s_wd) in
		Lwt.return @@ p [txt [%i18n S.your_presentation_is_scheduled_on];
			txt " ";
			txt (Printer.Date.sprint "%d %B %Y" pres_d);
			txt "."
		] in
	let%lwt (jw, lfw) = Moab_students.get_active_period (ayear, myid) in
	let%lwt p_pres = Moab_presentations.get_possible_presentations (ayear, myid, lw) in
	let%lwt f_pres = Moab_presentations.get_followed_presentations (ayear, myid) in
	let perc = Int64.div (Int64.mul f_pres 100L) p_pres in
	let feedback_row = tr ~a:[a_class ["feedback-row"]] [
		td [b [txt [%i18n S.given_feedback]]];
		td ~a:[a_class [if perc < 75L then "bad" else "good"]; a_colspan 25] [txt (Printf.sprintf "%Ld%%" perc)]
	] in
	let%lwt pres_peer = Moab_presentations.get_average_scores_opt (ayear, myid) >>=
	function
		| None -> Lwt.return_none
		| Some s -> Lwt_list.fold_left_s (fun acc (_, s) -> Lwt.return (s +. acc)) 0.0 s >>= Lwt.return_some in
	let%lwt (_, duration, _, pres_tutor, _) = Moab_presentations.get_admin_scores (ayear, myid) in
	let pres_total = Moab_base.compute_pres_total pres_peer duration pres_tutor in
	let%lwt blogs = Moab_blogs.get_nr_blogs (myid, ayear, true) >|= (fun x -> max 0 ((Int64.to_int x) - 14)) in
	let%lwt feedback = Moab_reports.get_report_feedback_opt (ayear, myid) in
	let total_report = match feedback with
		| None -> None
		| Some (_, q, _, i, _, g) -> Some (q + i + g) in
	let full_total = match pres_total, total_report with
		| None, _ | _, None -> None
		| Some p, Some r -> Some (p +. (float_of_int blogs) +. (float_of_int r)) in
	Lwt.return [div ~a:[a_class ["content-box"]] [
		h1 [txt [%i18n S.dashboard]];
		p (match lfw with
		| None -> []
		| Some x -> [b [txt [%i18n S.deactivated_since]; txt " "; txt (string_of_int x); txt " "]]);
		p [txt [%i18n S.dashboard_message]];
		p [txt [%i18n S.learning_week ~capitalize:true]; txt ": ";
		match lw with
		| None -> b [txt [%i18n S.none]]
		| Some l -> txt (string_of_int l)];
		p (txt [%i18n S.group_number]::txt ": "::(match gn with
		| None -> [b [txt [%i18n S.none]]]
		| Some g -> [txt (string_of_int g);
				txt "; ";
				txt [%i18n S.lecture_on];
				txt " ";
				txt (Printer.name_of_day (Date.day_of_int l_wd)); 
				txt " ";
				txt (Printer.Time.sprint "%H:%M" l_st);
				txt "-";
				txt (Printer.Time.sprint "%H:%M" l_et);
				txt " (";
				txt (match l_room with None -> [%i18n S.none] | Some x -> x);
				txt "), ";
				txt [%i18n S.seminar_on];
				txt " ";
				txt (Printer.name_of_day (Date.day_of_int s_wd)); 
				txt " ";
				txt (Printer.Time.sprint "%H:%M" s_st);
				txt "-";
				txt (Printer.Time.sprint "%H:%M" s_et);
				txt " (";
				txt (match s_room with None -> [%i18n S.none] | Some x -> x);
				txt ")"
			]));
		table ~a:[a_class ["dashboard-table"]] [
			attendance_row;
			blog_row;
			feedback_row
		];
		pres_row;
		h2 [txt [%i18n S.grades]];
		p [txt [%i18n S.dashboard_grade_message1]];
		table ~a:[a_class ["dashboard-grade-table"]] [
			tr [th [txt [%i18n S.presentation_grade]]; td [txt (match pres_total with None -> "--" | Some x -> Printf.sprintf "%.1f" x)]];
			tr [th [txt [%i18n S.blog_grade]]; td [txt (string_of_int blogs)]];
			tr [th [txt [%i18n S.report_grade]]; td [txt (match total_report with None -> "--" | Some x -> string_of_int x)]];
			tr [th [txt [%i18n S.total]]; td [txt (match full_total with None -> "--" | Some x -> Printf.sprintf "%.1f" x)]];
			tr [th [txt [%i18n S.twenty_point]]; 
				let (g, c) = Moab_base.to_20point full_total in
				td [txt (string_of_int g); txt " ("; txt c; txt ")"]	
			]
		]
	]]

let%shared examiner_dashboard () =
	Lwt.return [div ~a:[a_class ["content-box"]] [
		h1 [txt [%i18n S.dashboard]];
		p [txt [%i18n S.examiner_message1]]
	]]

let%shared main_service_handler myid_o () () =
	let%lwt contents = match myid_o with
	| None -> Lwt.return [p [%i18n welcome_text1]]
	| Some myid -> Moab_users.(
		let%lwt tp = get_user_type myid in
		match tp with
		| Admin -> admin_dashboard ()
		| Student -> student_dashboard myid
		| Examiner -> examiner_dashboard ())
	in
  Moab_container.page
    ~a:[ a_class ["os-page-main"] ]
    myid_o
		contents

let%shared settings_handler myid_o () () =
  let%lwt content = match myid_o with
    | Some _ -> Moab_settings.settings_content ()
    | None -> Lwt.return [ p [%i18n log_in_to_see_page ~capitalize:true]]
  in
  Moab_container.page myid_o content

let%server update_language_handler () language =
  Os_session.connected_wrapper Moab_language.update_language
    (Moab_i18n.language_of_string language)

let%client update_language_handler () language =
  Moab_i18n.(set_language (language_of_string language));
  Os_current_user.update_language language

(* Connection *)

let connect_handler () ((login, pwd), keepmeloggedin) =
	let student_nwid_regexp = Re.Str.regexp "^[A-Za-z][A-Za-z][0-9]+$" in
	let login_true =
		if Re.Str.string_match student_nwid_regexp login 0 = true
		then Printf.sprintf "%s@live.mdx.ac.uk" login
		else login in
	try%lwt
		let%lwt userid = Moab_users.verify_password login_true pwd in
		let%lwt () = Os_handlers.disconnect_handler () () in
		Os_session.connect ~expire:(not keepmeloggedin) userid
	with
	| Os_db.No_such_resource ->
		Eliom_reference.Volatile.set Os_user.wrong_password true;
		Os_msg.msg ~level:`Err ~onload:true "Wrong password";
		Lwt.return_unit

let%server connect_handler_rpc v = connect_handler () v

let%client connect_handler_rpc =
	~%(Eliom_client.server_function
			~name:"Moab_handlers.connect_handler"
			[%derive.json: (string * string) * bool]
		connect_handler_rpc)

let%client connect_handler () v = connect_handler_rpc v
